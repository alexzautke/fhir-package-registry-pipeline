name: Release-FHIR-Package-To-Registry (GitHub Actions)
description: Release a FHIR Package to a package regsitry as part of a GitHub Actions pipeline

inputs:
  SIMPLIFIER_USERNAME:
    description: 'Simplifier email address (not username), needed for running Quality Control checks. Please use GitHub Secrets for this variable.'
    required: true
  SIMPLIFIER_PASSWORD:
    description: 'Simplifier password, needed for running Quality Control checks. Please use GitHub Secrets for this variable.'
    required: true
  PACKAGE_FEED_REPO_NAME:
   description: 'Relative path to the package feed repository, repository will be used to extract the package feed and store the FHIR package itself'
   required: true
  PATH_TO_CONFORMANCE_RESOURCES:
   description: 'Relative path to folder with conformance resources incl. package.json'
   required: true
  BASE_URL_PACKAGE_FEED:
   description: 'Base url incl. subpath of the FHIR package feed'
   required: true
  PACKAGE_FEED_FILE_NAME:
   description: 'Filename of the FHIR package feed which shall be updated'
   required: true
  PATH_TO_PACKAGE_STORAGE:
   description: 'Path to parent folder in which all packages are to be stored in Git'
   required: true
  

runs:
  using: "composite"
  steps:
  
    # --------------------------------------------------------------------------------------------------- #
    #                                GENERATE PACKAGE USING FIRELY TERMINAL                               #
    # --------------------------------------------------------------------------------------------------- #
    
    - name: Check if .NET is installed
      run: |
        if ! command -v dotnet &> /dev/null
          then
            echo "dotnet could not be found. Please see actions/setup-dotnet to set it up before running this action."
            exit 1
        fi
      shell: bash
      
    # Test .NET SDK version
    - name: Check .NET SDK Version
      run: |
        CHECK_DOTNET_VERSION=$(dotnet --version)
        echo "DOTNET_VERSION: $CHECK_DOTNET_VERSION"
      shell: bash
      
    # Install Firely.Terminal
    - name: Install Firely.Terminal
      run: |
        dotnet tool install --global Firely.Terminal --version $FIRELY_TERMINAL_VERSION > /dev/null
      shell: bash
      env:
       FIRELY_TERMINAL_VERSION: 3.4.0
       
    # Test Firely.Terminal install
    - name: Check Firely Terminal Version
      run: |
        CHECK_FIRELY_TERMINAL_VERSION=$(fhir -v | tr '\n' ' ') # Print everything in a single line
        echo "FIRELY_TERMINAL_VERSION: $CHECK_FIRELY_TERMINAL_VERSION"
      shell: bash
      
    # Simplifier Login
    - name: Simplifier login
      run: |
        fhir login email=$INPUT_SIMPLIFIER_USERNAME password=$INPUT_SIMPLIFIER_PASSWORD
      shell: bash
      env:
       INPUT_SIMPLIFIER_USERNAME: ${{ inputs.SIMPLIFIER_USERNAME }}
       INPUT_SIMPLIFIER_PASSWORD: ${{ inputs.SIMPLIFIER_PASSWORD }}

    # Create FHIR package
    - name: Create FHIR package
      run: |
        cd $PATH_TO_CONFORMANCE_RESOURCES
        for requiredElementPackageJson in "name" "version" "description" "author"
        do
          requiredElementFound=$(jq .$requiredElementPackageJson package.json)
          if [[ $requiredElementFound = null ]]; then
            echo ".$requiredElementPackageJson must be present in package.json"
            exit 1
          fi
        done
        fhir pack
        
      shell: bash
      env:
        PATH_TO_CONFORMANCE_RESOURCES: ${{ inputs.PATH_TO_CONFORMANCE_RESOURCES }}
    
    # --------------------------------------------------------------------------------------------------- #
    #                                          UPDATE PACKAGE FEED                                        #
    # --------------------------------------------------------------------------------------------------- #
   
   # Install dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get -y --no-install-recommends install libxml2-utils xmlstarlet && \
        sudo apt-get autoremove -y && \
        sudo apt-get clean
      shell: bash
      
    # Copy FHIR package to package feed repository
    - name: Copy FHIR package to package feed repository 
      run: |
        for packageFile in $PATH_TO_CONFORMANCE_RESOURCES/*.tgz; 
        do
          tar zxf $packageFile
          packageJson=$(cat package/package.json)
          packageVersion=$(echo "$packageJson" | jq --raw-output .version)
          packageName=$(basename $PATH_TO_CONFORMANCE_RESOURCES/$packageFile .tgz)
          mkdir -p "$PACKAGE_FEED_REPO_NAME/packages/$packageName/$packageVersion/"
          cp $PATH_TO_CONFORMANCE_RESOURCES/$packageName.tgz "$PACKAGE_FEED_REPO_NAME"/"$PATH_TO_PACKAGE_STORAGE"/"$packageName"/"$packageVersion"/          
        done
      shell: bash
      env:
        PACKAGE_FEED_REPO_NAME: ${{ inputs.PACKAGE_FEED_REPO_NAME }}
        PATH_TO_CONFORMANCE_RESOURCES: ${{ inputs.PATH_TO_CONFORMANCE_RESOURCES }}
        PATH_TO_PACKAGE_STORAGE: ${{ inputs.PATH_TO_PACKAGE_STORAGE }}
        
    # Update FHIR package feed
    - name: Update FHIR Package Feed
      run: |
        for packageFile in $PATH_TO_CONFORMANCE_RESOURCES/*.tgz;
        do
          tar zxf $packageFile
          packageJson=$(cat package/package.json)
          packageVersion=$(echo "$packageJson" | jq --raw-output .version)
          packageName=$(basename $PATH_TO_CONFORMANCE_RESOURCES/$packageFile .tgz)
          packageFileName=$(basename $PATH_TO_CONFORMANCE_RESOURCES/$packageFile)          
          $GITHUB_WORKSPACE/update-fhir-package-feed/update-fhir-package-feed.sh $GITHUB_WORKSPACE/$PACKAGE_FEED_REPO_NAME/$PACKAGE_FEED_FILE_NAME "$GITHUB_WORKSPACE"/"$PACKAGE_FEED_REPO_NAME"/"$PATH_TO_PACKAGE_STORAGE"/"$packageName"/"$packageVersion"/"$packageFileName" $BASE_URL_PACKAGE_FEED
        done
      shell: bash
      env:
        PATH_TO_CONFORMANCE_RESOURCES: ${{ inputs.PATH_TO_CONFORMANCE_RESOURCES }}
        PACKAGE_FEED_REPO_NAME: ${{ inputs.PACKAGE_FEED_REPO_NAME }}
        BASE_URL_PACKAGE_FEED: ${{ inputs.BASE_URL_PACKAGE_FEED }}
        PACKAGE_FEED_FILE_NAME: ${{ inputs.PACKAGE_FEED_FILE_NAME }}
        PATH_TO_PACKAGE_STORAGE: ${{ inputs.PATH_TO_PACKAGE_STORAGE }}
